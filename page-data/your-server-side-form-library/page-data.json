{"componentChunkName":"component---src-templates-post-tsx","path":"/your-server-side-form-library","result":{"data":{"allPost":{"edges":[{"node":{"id":"blog-post-e9d339e6-8306-584d-b277-6491abbcc33d","parent":null,"internal":{"mediaType":"text/html","type":"post","owner":"default-site-plugin","ignoreType":null,"fieldOwners":null,"description":null,"contentDigest":"2014-10-29T07:48:14-07:00","content":"If it isn't already obvious from my previous posts, I've been spending a lot of time on the client side of things with JavaScript and the Dojo toolkit.<br />\nI had a chance last weekend to show off a little bit of Dojo and once I got past the lightweight technique for bootstrapping it from <i>the server</i>, my demonstration suddenly got a lot less glamorous.<br />\n<br />\nI think part of it got lost amidst what resembled gruelling&nbsp;swing form code. &nbsp;I was lucky in that I already had some completed forms to show off, so it was possible to show the kind of experiences you can deliver when you use a good client-side framework.<br />\n<br />\nThere was however a takeaway for me which after a lot of thinking, I think I've managed to figure out...<br />\n<h3>\nIt's Holding you Back!</h3>\nYour server side form library is killing your UX, coupling your model to the view and tying down your options client-side.<br />\n<br />\nI've worked with forms in Symfony 1.4 extensively and have become quite adept at bending them to whatever need may arise. &nbsp;I've played with the form library in Symfony 2.0 and am also familiar with what Rails has to offer.<br />\nAnyone who has spent time working with the forms of their server framework has probably puzzled over the best approach to a number of problems. &nbsp;Each time, spending most of the time making sure that all the gears line up.<br />\n<br />\nWhy not take that time and spend it instead on making better forms featuring a superior UX and decoupled, unobtrusive architecture?<br />\n<h3>\nIt's not all bad</h3>\nServer side form libraries do offer useful features in the way of data binding and validation. &nbsp;These are abstractions that I think any framework should focus on perfecting as they help ensure that you're committing good data.<br />\nWhere things start going wrong is when you become reliant on generating your forms and then depending on progressive enhancement to <i>make it pop</i>. &nbsp;The issue being that you've lost control of your implementation:<br />\n<ul>\n<li>Your markup is decided for you unless you pour hours into writing a renderer.</li>\n<li>The form will likely have to be included as part of a full page render.</li>\n<li>Your front end is now fully coupled with the server.</li>\n</ul>\nReally, at the end of the day, the best job you should want to do server-side is make sure bad data doesn't get in. &nbsp;So when it comes to designing client-side interactions, why not target the client first and the server second instead of the other way around?<br />\n<br />\nAfter all, the internet is always getting better - do you really want to have to worry about whether your server framework supports every new technology that comes around?<br />\n<h3>\nMy Original Problem</h3>\n<div>\nPeople who like using server side form libraries tend to turn their nose up at something like Dojo because it's alluring to be able to write a model and have everything thereafter generated. &nbsp;The problem however is that this architecture has everything pointing the wrong way.</div>\n<div>\n<br /></div>\n<div>\nGenerating forms server side can also have implications when it comes time to iterate after getting your first round of client feedback. &nbsp;How many times have you had a client look at a form and want it to be more? &nbsp;If you've ever designed a form beyond a simple <a href=\"http://en.wikipedia.org/wiki/Request_for_information\" target=\"_blank\">RFI</a>, you know full well that there is going to be extra work!</div>\n<h3>\nSolution</h3>\n<div>\nThis is an opinion that I've been slowly working my way towards, but I'm more and more convinced that time spent on server side forms can be - for a comparable investment of time - put to better use creating exclusively client side forms with the likes of Dojo, GWT or YUI.</div>\n<div>\n<br /></div>\n<div>\nAs someone who has spent time mastering Symfony 1.4's forms inside &amp; out, I think it's entirely conceivable that you can get better results doing things this way. &nbsp;Factor in the time spent wiring together (and troubleshooting/maintaining!) progressive enhancements, and I'm sure you'll at the very least break even.</div>\n<div>\n</div>\n"},"slug":"your-server-side-form-library","title":"Your Server-Side Form Library","created":"2012-11-29T01:27:00.000Z","updated":"2014-10-29T14:48:14.000Z"}}]}},"pageContext":{"slug":"your-server-side-form-library"}},"staticQueryHashes":["3220165301"]}