{"componentChunkName":"component---src-templates-post-tsx","path":"/integrating-third-party-templates-with-your-front-end-build-system","result":{"data":{"allPost":{"edges":[{"node":{"id":"blog-post-21999543-5fd1-5046-bae9-85b0a66dbc71","parent":null,"internal":{"mediaType":"text/html","type":"post","owner":"default-site-plugin","ignoreType":null,"fieldOwners":null,"description":null,"contentDigest":"2016-05-15T11:17:11-07:00","content":"I'm not by definition a front end developer, although because I do back end development, things like program structure and build systems are interesting to me regardless of whether they target servers or browsers. &nbsp;So while I can't make something look pretty, I still enjoy managing the complexity of JavaScript/ES transpiled apps.<br />\n<br />\nThis is a seemingly trivial post in an area that I feel doesn't get enough attention sometimes.<br />\n<br />\nWe recently purchased and started using a <a href=\"http://themeforest.net/item/adminplus-premium-bootstrap-4-admin-dashboard/14601290\" target=\"_blank\">premade template</a> for some minor projects at work. &nbsp;It actually looks quite nice, has a responsive layout and isn't <b>too terrible</b>. &nbsp;My usual complaints of <i>\"too much markup\"</i> and <i>\"lots of busy spaghetti scripting\"</i> still hold true, but most of this seems to be quite fire-and-forget.<br />\n<br />\nI ended up not being involved with the first few integrations of the template and while overall it ended up working, any trained eye could see where some of the cut lines were missed.<br />\n<br />\n<div style=\"text-align: center;\">\n<a href=\"http://1.bp.blogspot.com/-PWulQsC1Bhg/Vzd7mVkmBBI/AAAAAAAAitM/KMFQc2GtaKwDPCzJIC-HvPuRBXOECpSrgCK4B/s1600/download.png\" imageanchor=\"1\"><img border=\"0\" height=\"40\" src=\"https://1.bp.blogspot.com/-PWulQsC1Bhg/Vzd7mVkmBBI/AAAAAAAAitM/KMFQc2GtaKwDPCzJIC-HvPuRBXOECpSrgCK4B/s320/download.png\" width=\"320\" /></a></div>\n<div style=\"text-align: left;\">\n<br /></div>\n<div style=\"text-align: left;\">\nI had resolved that for the next integration of the template in a new project, we'd do it <i>the right way</i><b style=\"background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;\"><i>â„¢</i></b><b style=\"background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;\">!</b></div>\n<h3 style=\"text-align: left;\">\nModule Loaders and Package Managers</h3>\n<div style=\"text-align: left;\">\nIn our projects, we use the extremely powerful <a href=\"http://jspm.io/\" target=\"_blank\">JSPM</a> dependency and module loader framework.</div>\nIf you're new to the idea of things like JSPM, DUO, require.js, WebPack or Browserify, you can think of them as tools that help you manage complexity when modularizing browser projects. &nbsp;Most of it centres around module loading, but is further improved by building dependency graphs, inlining resources, and&nbsp;<a href=\"https://en.wikipedia.org/wiki/Source-to-source_compiler\" target=\"_blank\">transpilation</a>.<br />\n<div>\n<br /></div>\n<div>\nI think it's very easy for people to get confused by JSPM without realizing that it exists to address two or three very simple concerns that other module loading toolkits gloss over. &nbsp;Another benefit of JSPM is that it plays nicely with NPM and is <a href=\"https://medium.com/@capajj/jspm-the-only-package-manager-suited-for-http-2-9ca0bccadb5a#.u7lhwqtuf\" target=\"_blank\">future facing</a>. &nbsp;My advice to anyone struggling with it is to take the time to understand the tool and the goals any developer should have of producing good quality source code.</div>\n<div style=\"text-align: left;\">\n<br /></div>\n<div style=\"text-align: left;\">\nOn top of JSPM, we also use TypeScript so that we can produce nicely structured source code that is easy to collaborate on. &nbsp;Indeed, it's thanks to JSPM that we can integrate TypeScript so nicely with our workflow. &nbsp;You can substitute TypeScript for ES6, CoffeeScript or even ES5, the conventions and principles remain overall the same.</div>\n<h3 style=\"text-align: left;\">\nBack to the Template</h3>\n<div style=\"text-align: left;\">\nSo, looking at the template we used, it turns out to be a great case study for this process. &nbsp;It has a mix of dependencies that can be found on NPM as well as one small custom script that's been distributed as a minified file. &nbsp;It also uses SASS for its templates.</div>\n<div style=\"text-align: left;\">\n<h4>\nMarkup</h4>\n</div>\n<div style=\"text-align: left;\">\nThe first and simplest thing we did was derive new base templates from the example markup. &nbsp;We use <a href=\"http://laravel.com/\" target=\"_blank\">Laravel</a>, so this was a piece of cake thanks to <a href=\"https://laravel.com/docs/master/blade\" target=\"_blank\">blade</a> or <a href=\"http://twig.sensiolabs.org/\" target=\"_blank\">twig</a>&nbsp;for templating.<br />\n<br />\nThe general rule here is that so long as you play by the conventions they've established for DOM structure, their SASS/CSS should still work. &nbsp;The template's original HTML files really just end up being your style guide.<br />\n<h4>\nStylesheets</h4>\nThings start to get a little tricky here because what we want are for the styles to work, but in such a way that the third party template can become part of the build process. &nbsp;Not just us consuming it as output. &nbsp;By doing that, if we need to add or change styles from the original template, it won't create additional overhead.<br />\n<br />\nThe \"right way\" - and yes, I do believe there can sometimes be a best-approach to solving problems - to do this was to take the SCSS files that came with the template and to categorize them in the de-facto structure in my Laravel project.<br />\n<br />\n<div style=\"text-align: center;\">\n<a href=\"http://2.bp.blogspot.com/-ZRjLdmiWPRY/VzeCPKgUeGI/AAAAAAAAit4/dX9iTRSJX50di1ihHCpFf9Ga23mk99zygCK4B/s1600/download%2B%25282%2529.png\" imageanchor=\"1\"><img border=\"0\" height=\"320\" src=\"https://2.bp.blogspot.com/-ZRjLdmiWPRY/VzeCPKgUeGI/AAAAAAAAit4/dX9iTRSJX50di1ihHCpFf9Ga23mk99zygCK4B/s320/download%2B%25282%2529.png\" width=\"173\" /></a></div>\n<br />\nThis is great because now anyone familiar with Laravel can be familiar with the template we purchased! &nbsp;If you examine the image carefully, you'll see that I have a file called <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; font-size: x-small;\">dashboard.scss</span>. &nbsp;Let's take a look and see what's inside!<br />\n<br />\n<div style=\"text-align: center;\">\n<a href=\"http://1.bp.blogspot.com/-pupyPQzasrw/VzeDO0rU77I/AAAAAAAAiuI/xljL9Wr0AAgAgV8COHK6OLvpcutdAKACQCK4B/s1600/download%2B%25283%2529.png\" imageanchor=\"1\"><img border=\"0\" src=\"https://1.bp.blogspot.com/-pupyPQzasrw/VzeDO0rU77I/AAAAAAAAiuI/xljL9Wr0AAgAgV8COHK6OLvpcutdAKACQCK4B/s400/download%2B%25283%2529.png\" /></a></div>\n<br />\nAs you might have been able to guess, it's quite simple! &nbsp;Because we've given ourselves the entirety of the template's source stylesheets, we can now work with them as a first-class citizen. &nbsp;This is significantly better than what many people do when shoehorning templates into a site which is to usually end up with two link tags. &nbsp;One pointing to the original styles, and another <a href=\"https://en.wikipedia.org/wiki/Flash_of_unstyled_content\" target=\"_blank\">pointing to their overrides</a>. &nbsp;Yuck!<br />\n<br />\nWith the dashboard CSS file all set up, building is just a matter of following a normal SASS build flow. &nbsp;In my Laravel project, that is ideally done using <a href=\"https://github.com/laravel/elixir\" target=\"_blank\">Laravel Elixir</a>, but projects can differ on this. I'm going to leave understanding SASS build flows as <a href=\"http://sass-lang.com/\" target=\"_blank\">outside the scope of this post</a>.<br />\n<br />\nThe only thing you should have as an objective - regardless of your environment - is that you are including <b>only one stylesheet</b>. &nbsp;If you end up with more, you've missed a chance to optimize your workflow and project structure.<br />\nIf you have multiple interfaces that share styles in common, don't despair. &nbsp;All you have to do is produce a new SCSS file that includes/inherits from the original root one (in my case <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; font-size: x-small;\">dashboard.scss</span>) and then build and include that instead!<br />\n<h4>\nScripts</h4>\nAs I'm sure my introductions above made clear, I'm of the view that getting your scripts set up correctly is a delicate art. You can definitely jump in all gangbusters and start throwing spaghetti at the walls, but that will not make you a professional. &nbsp;No, I can't tell you that small nests of imperative code, outbreaks of callbacks and global state&nbsp;<b>won't</b> work. &nbsp;I'm just going to say that I hope you don't end up with a lot of it or having to maintain it.<br />\nI've experienced first hand the full list of excuses for not doing clean front end development from day one. Invariably, it's those same people that end up suffering from a lot of friction in their projects only weeks in, confused on why everything has devolved into a mess.<br />\n<br />\nIf you've just bought or inherited a template for your project, I'm going to wager the template author did not use a module system for their scripts. &nbsp;A quarter of the time you might get lucky and they've got bower or NPM set up to barf a bunch of files that they include with script tags. &nbsp;But even that isn't great.<br />\n<br />\nAll of this is a problem. &nbsp;Maybe not today, but if your solution is successful, you're going to want to get in front of this now before it's too big to justify fixing. &nbsp;This truncated screenshot should give you an idea of what I'm talking about:<br />\n<br />\n<div style=\"text-align: center;\">\n<a href=\"http://4.bp.blogspot.com/-SQa3YG7GFBs/VzeJK1kvnEI/AAAAAAAAiuw/q_e5xa22Jlcyc8GeUwV56TX1c9xYwgipgCK4B/s1600/download%2B%25284%2529.png\" imageanchor=\"1\"><img border=\"0\" height=\"68\" src=\"https://4.bp.blogspot.com/-SQa3YG7GFBs/VzeJK1kvnEI/AAAAAAAAiuw/q_e5xa22Jlcyc8GeUwV56TX1c9xYwgipgCK4B/s640/download%2B%25284%2529.png\" width=\"640\" /></a></div>\n<br />\nWhen the page loads, it's going to issue requests for each of these resources and then the sidebar script that came with the template. &nbsp;Managing these dependencies isn't something you should leave up to markup, it would be much nicer to have tooling set up around it.<br />\n<br />\nThe first step to doing that is to get those external dependencies tracked and managed using some kind of tool. &nbsp;In my case, this will be JSPM:<br />\n<br />\n<div style=\"text-align: center;\">\n<a href=\"http://3.bp.blogspot.com/-I2aNaqA-Isg/VzeKM3J2kGI/AAAAAAAAivE/S6P97jpWorE8PDW4T5SU6S43FRCYgP8lACK4B/s1600/download%2B%25285%2529.png\" imageanchor=\"1\"><img border=\"0\" height=\"73\" src=\"https://3.bp.blogspot.com/-I2aNaqA-Isg/VzeKM3J2kGI/AAAAAAAAivE/S6P97jpWorE8PDW4T5SU6S43FRCYgP8lACK4B/s320/download%2B%25285%2529.png\" width=\"320\" /></a></div>\n<br />\nOf course, you also have Bower, DUO and NPM as alternatives for this which are able to cooperate to varying degrees with other tools. Regardless of what you use, I'm sure you can see, managing your external libraries as dependencies is super easy.<br />\n<br />\nNext, I'm going to skip the step of assembling these dependencies together and I'm going to bring this back to the template. &nbsp;Just for perspective.<br />\n<br />\nThe template I'm talking about here would be the same one that imports the built output of my <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; font-size: x-small;\">dashboard.scss</span> file. &nbsp;Inside this file - and if you're using JSPM, only do this in development mode - the block you end up authoring looks like this:</div>\n<div style=\"text-align: left;\">\n<br /></div>\n<div style=\"text-align: left;\">\n<div style=\"text-align: center;\">\n<a href=\"http://2.bp.blogspot.com/-aqggnnsfr0w/VzeBOLf0WGI/AAAAAAAAito/hAxVFKSWQqsgTS8t3fpPtxNxd2eF8mGbACK4B/s1600/download%2B%25281%2529.png\" imageanchor=\"1\"><img border=\"0\" height=\"72\" src=\"https://2.bp.blogspot.com/-aqggnnsfr0w/VzeBOLf0WGI/AAAAAAAAito/hAxVFKSWQqsgTS8t3fpPtxNxd2eF8mGbACK4B/s320/download%2B%25281%2529.png\" width=\"320\" /></a></div>\n<div style=\"text-align: center;\">\n<br /></div>\n<div style=\"text-align: left;\">\nIn my case, this is all just setup for JSPM so that it can do runtime transpiation and dependency loading. &nbsp;In production, you can minify your output and tell your templating engine to include one file as opposed to four.</div>\n<div style=\"text-align: left;\">\n<br /></div>\n<div style=\"text-align: left;\">\nWhat ends up being really nice is the code inside of <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; font-size: x-small;\">dashboard.ts</span>:</div>\n<div style=\"text-align: left;\">\n<br /></div>\n<div style=\"text-align: center;\">\n<a href=\"http://1.bp.blogspot.com/-iGbiQOh24KM/VzeMjG-jVBI/AAAAAAAAivg/kl1pNWXteiQIqZJPjI-0nkM1MxlSPO3_ACK4B/s1600/download%2B%25286%2529.png\" imageanchor=\"1\"><img border=\"0\" src=\"https://1.bp.blogspot.com/-iGbiQOh24KM/VzeMjG-jVBI/AAAAAAAAivg/kl1pNWXteiQIqZJPjI-0nkM1MxlSPO3_ACK4B/s400/download%2B%25286%2529.png\" /></a></div>\n<div style=\"text-align: left;\">\n<br /></div>\n<div style=\"text-align: left;\">\nAs you can see, the last file, <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace; font-size: x-small;\">sidebar.min.js</span> is also included here, and all I've done is move it into a static library directory as part of my project.</div>\n</div>\n<div style=\"text-align: left;\">\n<h3>\nTada!</h3>\n</div>\n<div style=\"text-align: left;\">\nThat's it! &nbsp;Granted, these steps are very broad strokes, but they should be applicable for a good number of frameworks and environments.<br />\n<br />\nLooking back at the problem I originally described, rather than having a hodge podge of files that are hostile to my project, I've been able to fully integrate them as if they were authored as part of it.<br />\n<ul>\n<li>Whenever I invoke a SASS build, my stylesheets will compile down to single files, including the template's own variables which I now have access to customize under source control</li>\n<li>Whenever I build my front end scripts, they too will compile down to single files which can be delivered quickly as a versioned bundle from a CDN</li>\n<li>I can create any number of derivative builds using native SASS and TypeScript language constructs instead of complex build configurations and markup-controlled dependency loading</li>\n<li>My development flow has not been hampered and my relationship with the template we bought remains the same as it always has been: Adhere to the DOM conventions</li>\n</ul>\n<div>\n<br /></div>\n</div>\n"},"slug":"integrating-third-party-templates-with-your-front-end-build-system","title":"Integrating third party templates with your front end build system","created":"2016-05-14T20:48:00.000Z","updated":"2016-05-15T18:17:11.000Z"}}]}},"pageContext":{"slug":"integrating-third-party-templates-with-your-front-end-build-system"}},"staticQueryHashes":["3220165301"]}