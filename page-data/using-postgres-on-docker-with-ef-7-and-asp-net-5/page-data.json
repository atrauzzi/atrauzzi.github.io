{"componentChunkName":"component---src-templates-post-tsx","path":"/using-postgres-on-docker-with-ef-7-and-asp-net-5","result":{"data":{"allPost":{"edges":[{"node":{"id":"blog-post-eb070b87-e80a-5633-9696-a393937b40e9","parent":null,"internal":{"mediaType":"text/html","type":"post","owner":"default-site-plugin","ignoreType":null,"fieldOwners":null,"description":null,"contentDigest":"2015-12-30T18:56:25-08:00","content":"In an effort to get a better understanding of the ASP.NET framework, I've started a simple toy project from scratch. &nbsp;I've really been enjoying how easy it is to plug everything together with Microsoft's reboot of the framework. &nbsp;Just spin up a project.json file and get going, it's pretty impressive how much you can get done with so few files.<br />\nI think the community has been doing a great job with blog posts, so I've not had many opportunities to contribute any unique content that isn't already covered.<br />\n<br />\nWhile working through things today however, I thought it might be nice to try and prove out how Entity Framework 7 can work with non-Microsoft databases and containers. &nbsp;The most appealing at the time of writing being postgres thanks to the awesome work by the people over at <a href=\"http://www.npgsql.org/\" target=\"_blank\">npgsql</a>.<br />\nBecause I've been developing in Windows using Visual Studio, the first thing that would be nice is to not have to spoil my system with a database installation. &nbsp;No surprise, docker seems like it would make a great ally for that!<br />\n<br />\nSo, for this blog post, I'd like to take you through setting up a docker container running postgres and then adding support to your ASP.NET 5 project to run migrations against it.<br />\n<h3>\nDocker &amp; Database Setup</h3>\nIt's easy to get started with Docker Toolbox, just download and run <a href=\"https://www.docker.com/docker-toolbox\" target=\"_blank\">the installer</a>. &nbsp;One snag I encountered was that I had Hyper-V enabled on my machine. &nbsp;This resulted in the docker quickstart terminal giving me some errors about virtualization not being enabled on my machine.<br />\nUnder the hood, docker toolbox uses VirtualBox which <a href=\"https://www.virtualbox.org/ticket/12350\" target=\"_blank\">cannot run with Hyper-V</a>. &nbsp;It's not much at the moment, but I have taken the time to ask that they <a href=\"https://github.com/docker/machine/issues/2630\" target=\"_blank\">make docker machine's Hyper-V support a little more user friendly</a>. &nbsp;I encourage you to head over there and give it a&nbsp;<i>+1</i> if you agree.<br />\n<br />\nWith toolbox downloaded, create a file called <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">local-development.yml</span> at the root of your project. &nbsp;Take a copy of <a href=\"https://gist.github.com/atrauzzi/5a00adb495c293260ec5#file-local-development-yml\" target=\"_blank\">this code</a> which defines a container configuration based on the official postgres docker image.<br />\n<br />\nIf you're running on OSX or Windows and are like me, you'll probably also want the server to behave as though it was on localhost. &nbsp;You can run this to forward all traffic destined for 5432 on your machine to the docker vm:<br />\n<br />\n<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">docker-machine stop default</span><br />\n<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">VBoxManage modifyvm \"default\" --natpf1 \"app,tcp,,5432,,5432\"</span><br />\n<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">docker-machine start default</span><br />\n<br />\n<i>(Note: VBoxManage may not be on your path in Windows, but it is in the program's installation folder in Program Files.)</i><br />\n<br />\nFinally, you can try starting the database server by simply typing the following in a docker-enabled terminal at the root of your project:<br />\n<br />\n<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">docker-compose -f local-development.yml up</span><br />\n<br />\nAfter which point, you should be able to use any postgres client to connect to the database. &nbsp;I suggest <a href=\"https://www.jetbrains.com/datagrip/\" target=\"_blank\">DataGrip</a>&nbsp;-&nbsp;formerly 0xdbe -&nbsp;made by the folks over at JetBrains.<br />\n<h3>\nProject Setup</h3>\n<div>\nSo far, you've got a database, but now what steps need to be taken to get ASP.NET talking to the containerized database?</div>\n<div>\n<br /></div>\n<div>\nReally, things couldn't be any simpler. &nbsp;First off, you'll want to open up <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">project.json</span> and ensure you have the lines from <a href=\"https://gist.github.com/atrauzzi/5a00adb495c293260ec5#file-project-json\" target=\"_blank\">this gist</a> present.</div>\n<div>\n<br /></div>\n<div>\nMake sure you get a package restore done automatically via your tooling or manually by running <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">dnu restore</span>.</div>\n<div>\n<br /></div>\n<div>\nNext, you're going to want to make sure you've enabled EF7 in your project's <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Startup.cs</span> file. &nbsp;<a href=\"https://gist.github.com/atrauzzi/5a00adb495c293260ec5#file-startup-cs\" target=\"_blank\">Here's a copy</a> of the method and what you have to call to get that done. &nbsp;Mix in what I have with what you've got as needed.</div>\n<br />\nThe last step, which I've left to this point deliberately is to add the <a href=\"https://gist.github.com/atrauzzi/5a00adb495c293260ec5#file-applicationdbcontext-cs\" target=\"_blank\">configuration for postgres</a> to your <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">DbContext</span>.<br />\nThis file is usually going to be heavily tailored to your project. &nbsp;So I'm going to try and avoid anything to do with your schema. &nbsp;The file I've shared with you is just barebones enough to have identity and a crude configuration string. &nbsp;Once you've mixed in my example code with your working <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">DbContext</span>, you should have everything you need to try generating a migration and running it.<br />\n<h3>\nMigrating</h3>\nWhen I started learning about frameworks, running my first migrations was an oddly rewarding experience. &nbsp;For me, it completed the circle of understanding and represented the moment that I felt I was able to apply what I had learned to create real solutions.<br />\n<br />\nMy hope with this blog post is that you'll feel the same about ASP.NET today as I do. &nbsp;These next steps are easy. &nbsp;All you need is a terminal with <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">dnx</span> working at the root of your project:<br />\n<br />\n<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">dnx ef migrations add Initial</span><br />\n<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">dnx ef database update</span><br />\n<div>\n<br /></div>\nWhich, in my case, got me a new file in my project, as well as this:<br />\n<br />\n<div class=\"separator\" style=\"clear: both; text-align: center;\">\n<a href=\"http://1.bp.blogspot.com/-yqOU4bU3ynA/VnXrFxnhpGI/AAAAAAAAe8k/fEJkG5_Gtlw/s1600/EF7%2BMigration%2BSuccess.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"259\" src=\"http://1.bp.blogspot.com/-yqOU4bU3ynA/VnXrFxnhpGI/AAAAAAAAe8k/fEJkG5_Gtlw/s320/EF7%2BMigration%2BSuccess.png\" width=\"320\" /></a></div>\n<br />\nAnd that's it! &nbsp;You now have access to all the functionality of EF7 and ASP.NET 5.<br />\n<br />\nKeep in mind that while ASP.NET 5 is now RC, there's always some remote chance that something could change. &nbsp;The one thing I can easily predict now is that any use of <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">dnx</span> will be changing to <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">dotnet</span>.<br />\nBeyond that though, this should be a fairly safe blog post. &nbsp;Most of it concentrates on getting you going with a postgres container.<br />\n<h3>\nFinal Thoughts</h3>\nThere are a few more things when it comes to containerization that I'd like to get working, mainly adding an entry in <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">local-development.yml</span> for my ASP.NET app. &nbsp;Although simulating a live environment locally is something that can easily swallow days of effort. &nbsp;It's usually enough to say that ASP.NET takes care of a lot of environment abstraction for you.<br />\nOver time, I feel like if I need to containerize the app itself, I'll just make that a deployment detail and not concern my development workflow with it.<br />\nWe'll see though, as using containers for actual development can sometimes be quite useful when onboarding new team members.<br />\n<br />\nHopefully I haven't accidentally left anything out, but if you have any issues getting to a point where you've got your migration generated, let me know in a comment! "},"slug":"using-postgres-on-docker-with-ef-7-and-asp-net-5","title":"Using Postgres on Docker with EF7 and ASP.NET 5","created":"2015-12-19T23:49:00.000Z","updated":"2015-12-31T02:56:25.000Z"}}]}},"pageContext":{"slug":"using-postgres-on-docker-with-ef-7-and-asp-net-5"}},"staticQueryHashes":["3220165301"]}