{"componentChunkName":"component---src-templates-post-tsx","path":"/moving-away-from-laravel-facades","result":{"data":{"allPost":{"edges":[{"node":{"id":"blog-post-55faa35a-18ad-5d76-ab14-eaca2974e3e8","parent":null,"internal":{"mediaType":"text/html","type":"post","owner":"default-site-plugin","ignoreType":null,"fieldOwners":null,"description":null,"contentDigest":"2013-08-15T09:12:17-07:00","content":"Are you looking for a way to resolve things like translation, validation and config from the Laravel IoC?  Look no further!\n\n<br />\n<br />\nMake yourself a service provider (whether in a common tools package or in your project) and add the following to it in the register method:<br />\n<br />\n<pre> $this-&gt;app-&gt;bind('Symfony\\Component\\Translation\\TranslatorInterface', function ($app) {\n  return $app['translator'];\n });\n\n $this-&gt;app-&gt;bind('Illuminate\\Config\\Repository', function ($app) {\n  return $app['config'];\n });\n</pre>\n<br />\nWhat you've done is mapped all the string-registered services to their most abstract but also most specific types. &nbsp;Config is a good example of where you should be binding the class name and not an interface because the only interfaces it implements are ArrayAccess, and that's obviously wrong! :)<br />\n<br />\nHappy constructor-injecting!"},"slug":"moving-away-from-laravel-facades","title":"Moving away from Laravel Facades","created":"2013-08-15T16:12:00.000Z","updated":"2013-08-15T16:12:17.000Z"}}]}},"pageContext":{"slug":"moving-away-from-laravel-facades"}},"staticQueryHashes":["3220165301"]}