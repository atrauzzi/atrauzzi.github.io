{"componentChunkName":"component---src-templates-post-tsx","path":"/laravel-is-good-facades-arent","result":{"data":{"allPost":{"edges":[{"node":{"id":"blog-post-6a984867-0ef4-58e2-8fe5-63d2691c8588","parent":null,"internal":{"mediaType":"text/html","type":"post","owner":"default-site-plugin","ignoreType":null,"fieldOwners":null,"description":null,"contentDigest":"2017-09-22T03:32:21-07:00","content":"I've been working on some Laravel 4 based packages lately which inevitably results in me also looking at other packages.<br />\n<br />\nI've noticed sometimes that people use facades at times that give me pause. The most troubling being from inside their model classes.<br />\n<br />\nA quick google turned up <a href=\"https://tutsplus.com/lesson/when-they-say-laravel-shouldnt-use-static-methods/\" target=\"_blank\">this video</a> which assures people <i>\"there's still an instance behind everything, we're fine\"</i>. &nbsp;Everything mentioned in the video is true except that there is a very glaring omission.<br />\n<br />\n<h3>\nScope</h3>\n<div>\nWhat usually goes out the door at the start of a long series of mishaps in software design is <u>scope</u>.</div>\n<div>\n<br /></div>\n<div>\nWhen the desire to obtain a solution is stronger than the desire to consider the implications of a firm approach, mistakes are sure to follow. &nbsp;Sacrifices like this are made due to the assumption of a high cost to developing carefully.</div>\n<div>\n<br /></div>\n<div>\nWhat really is happening however is a <i>false dilemma</i>, being responded to with a <i>convenience decision</i>.</div>\n<div>\n<br /></div>\n<div>\nIt's very easy to write model code like this:<br />\n<br /></div>\n<pre>     class MyModel extends Model {\n          public function getUri() {\n\n               return Request::root() . '/mymodel/' . $this-&gt;slug;\n\n          }\n     }\n</pre>\n<div>\n<br /></div>\n<div>\n...and then think that you've done a great job at putting the code where it belongs, encapsulation, simplicity, elegance and other nice things.<br />\n<br />\nUnfortunately, what you've also done is created a dependency by conflating an infrastructure concern with your model. &nbsp;Understand that <u>this isn't because you've used a static method, but because you've used a class resolved via the container that might not be ready yet</u>.<br />\n<br />\n<h3>\nSo what?</h3>\n</div>\n<div>\nYou could be blithe about this and think \"I'm always going to be in a request because I'm coding for the web!\" &nbsp;At which point, we're facing another convenient assumption and it becomes all too easy to see where things unravel:</div>\n<div>\n<ul>\n<li>Scope - Imagine&nbsp;you find the model class above performing in a scope that doesn't find itself within a request. &nbsp;This could be in a cron, or it could be when you need your class running unauthenticated. &nbsp;These are just two examples, but a change in context can and will catch you by surprise and your programs will crash trying to use a method that was made in haste.</li>\n<li>Cross Cutting Concerns - Suddenly&nbsp;a method you've authored on a class requires a security check, but you don't have access to the necessary information from within the class to do this. &nbsp;You're faced now with further convenience decisions that lead to bloated model code. &nbsp;That can lead to duplication at best because you're now having to consider all angles up front.</li>\n<li>Difficult usage tracking - Facades lean on some PHP magic to do their thing. This also causes a break in the dependency graph of your application.</li>\n</ul>\n</div>\n<h3>\nWhat instead?</h3>\n<div>\nMake services! &nbsp;There is a fine line here, but when you need to do an operation that blends disparate pieces of information and resources, make a service. &nbsp;The dependencies of that service will represent the scope you wish to create for that particular operation. &nbsp;Once that service is made, you can rest easy knowing it exists in a space that has all the right dependencies and state to perform the singular operation you're after.</div>\n<div>\n<br /></div>\n<div>\nThe other benefit is that it gives you a centralized point to handle cross cutting concerns. &nbsp;If one day you need to perform a secondary operation (security checks, analytics, accounting), you won't be adding more bloat to your model. &nbsp;You will simply find the scope (read: service) you know the operation transpires in, and add it there.</div>\n<div>\n<br /></div>\n<div>\nI can assure you that by taking this approach, you'll be doing yourself a favour in the single responsibility, cohesion, repeatability and DRY departments.</div>\n"},"slug":"laravel-is-good-facades-arent","title":"Laravel is Good, Facades Aren't","created":"2014-02-22T16:08:00.000Z","updated":"2017-09-22T10:32:21.000Z"}}]}},"pageContext":{"slug":"laravel-is-good-facades-arent"}},"staticQueryHashes":["3220165301"]}