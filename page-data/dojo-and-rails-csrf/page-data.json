{"componentChunkName":"component---src-templates-post-tsx","path":"/dojo-and-rails-csrf","result":{"data":{"allPost":{"edges":[{"node":{"id":"blog-post-e292927f-4aaf-5429-b62e-92cefbc71fb4","parent":null,"internal":{"mediaType":"text/html","type":"post","owner":"default-site-plugin","ignoreType":null,"fieldOwners":null,"description":null,"contentDigest":"2012-11-24T14:36:39-08:00","content":"If you're using Dojo and Rails &amp; are having some issues with asyncs to your server being rejected, consider employing the following in your <a href=\"http://dojotoolkit.org/api/1.8/dojo/request/xhr\" target=\"_blank\">xhr</a> or <a href=\"http://dojotoolkit.org/api/1.8/dojo/store/JsonRest\" target=\"_blank\">JsonRest</a>:<br />\n<br />\n<pre>headers: {\n \"X-CSRF-Token\": query(\"meta[name='csrf-token']\").attr(\"content\")\n}\n</pre>\n<br />\nIn my particular situation, I was trying to do HTTP POSTs and Rails was terminating my session likely because it perceived the lack of a CSRF token as a hijack attempt. &nbsp;The code here simply adds the token as an HTTP header in the request.<br />\n<br />\nI think once I've had some time with this fix, I might look at subclassing these objects for my project and pre-populating the header. &nbsp;Then I'll simply substitute my implementations for the default Dojo ones.<br />\n<br />\nWhich - come to think of it - would probably make for a good case when discussing the advantages of <a href=\"http://dojotoolkit.org/blog/learn-more-about-amd\" target=\"_blank\">AMD</a>.<br />\n<br />\n<span style=\"font-size: x-small;\">Fear not, if you happen to be using jQuery and are experiencing this issue, <a href=\"http://excid3.com/blog/rails-tip-2-include-csrf-token-with-every-ajax-request/\" target=\"_blank\">here's an equivalent solution</a>.</span>"},"slug":"dojo-and-rails-csrf","title":"Dojo and Rails CSRF","created":"2012-11-24T22:33:00.000Z","updated":"2012-11-24T22:36:39.000Z"}}]}},"pageContext":{"slug":"dojo-and-rails-csrf"}},"staticQueryHashes":["3220165301"]}