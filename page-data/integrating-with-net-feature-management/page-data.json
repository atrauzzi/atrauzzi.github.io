{"componentChunkName":"component---src-templates-post-tsx","path":"/integrating-with-net-feature-management","result":{"data":{"allPost":{"edges":[{"node":{"id":"blog-post-2ddb29ab-fe23-58a5-9793-f7dff9a8037d","parent":{"__typename":"MarkdownRemark","html":"<p>With .NET now competing on the global stage with other languages, runtimes and frameworks, something that often gets overlooked is the number of abstractions that come bundled with the core libraries.  One of which I recently started using being <a href=\"https://github.com/microsoft/FeatureManagement-Dotnet\">Feature Management</a>.</p>\n<p>The feature management abstraction in .NET is interesting because like others in the framework, it merely defines the contract by which other code will consume the <em>concept</em> of features. It leaves the implementation however, as something that can be plugged in from multiple sources.  I like to think of these kinds of abstractions as conversation starters for projects to rally around.  It's especially nice when these abstractions allow for multiple implementations to coexist within the same project...where warranted of course!</p>\n<h3>What You Gain</h3>\n<p>I think without taking too much away from the official documentation, feature management gives you one central place to see if a <em>feature</em> is available. What those <em>features</em> are and their significance is something that you're empowered to design based on whatever your application needs!</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IFeatureManager</span> featureManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IFeatureManager</span> featureManager<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>featureManager <span class=\"token operator\">=</span> featureManager<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">PerformSomeTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> featureManager<span class=\"token punctuation\">.</span><span class=\"token function\">IsEnabledAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vnext-preview\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Do vnext preview things!</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It even ships with an ASP.NET filter:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FeatureGate</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"vnext-preview\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrganizationController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Controller</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// note: You can also apply the annotation above to methods/actions!</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Putting It To Use</h3>\n<p>By default, feature management ships with the ability to configure your features statically using the <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration\">.NET configuration system</a>. This also includes some neat utility filters that can help you do things like A/B testing as well as time based access.</p>\n<p>All of this is dependent on you having your features defined at run time, but what if you happen to have some additional feature information that isn't part of your deployments?  What if you want to flow-in feature state based on an entitlement or billing system where the data is stored somewhere outside of the application?</p>\n<p>Enter <em>feature filters</em>!</p>\n<p>I admit, the name still doesn't seem intuitive, even after getting things working. It took me a bit to wrap my head around the specific intent behind the word <em>filter</em>.  A feature filter is a piece of code <strong>registered as a singleton</strong> that gets called numerous times to give a thumbs up or a thumbs down on whether features are enabled.\nUpon being asked, feature filters have to be able to source the information they need to return a <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code> response back to the feature management system.</p>\n<p>Keep in mind that bit I mentioned about it being registered as a singleton though, we'll come back to that...</p>\n<h3>Using Feature Filters During Requests</h3>\n<p>In my application, I load in data about the current tenant and user on every request and I pack it into a special context object. This data, despite being a complicated graph is easy to cache because it is very consistent between requests. The context object can be thought of something somewhere half way between <code class=\"language-text\">HttpContext</code> and <code class=\"language-text\">DbContext</code> and represents the a resource for anywhere in the application where infrastructure and domain must interact.</p>\n<p>In this next code sample, you'll see me using it when I use service location to look up a type called <code class=\"language-text\">AppContext</code>. Let's get the code in front of us, and then after I'll explain what's going on and also more about the singleton gotcha:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">App<span class=\"token punctuation\">.</span>Http</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppFeatureFilter</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IFeatureFilter</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IHttpContextAccessor</span> httpContextAccessor<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">AppFeatureFilter</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>AppFeatureFilter<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">,</span> \n            <span class=\"token class-name\">IHttpContextAccessor</span> httpContextAccessor\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpContextAccessor <span class=\"token operator\">=</span> httpContextAccessor<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">EvaluateAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FeatureFilterEvaluationContext</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpContext <span class=\"token operator\">=</span> httpContextAccessor<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 1.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpContext <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>LogLevel<span class=\"token punctuation\">.</span>Information<span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Feature </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">feature<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> was checked outside of an http context.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// 2.</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> appContext <span class=\"token operator\">=</span> httpContext<span class=\"token punctuation\">.</span>RequestServices<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AppContext<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> currentUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> appContext<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 3.</span>\n            <span class=\"token keyword\">return</span> currentUser<span class=\"token punctuation\">.</span>Features<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>feature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol>\n<li>As a bit of due diligence, I like to ensure that if for any reason my filter is called outside of a web request, I don't accidentally crash the application, and I also log a bit of information out. This code is unlikely to be run, but I'll thank myself for logging this here if ever I'm tracing a particularly tricky bug.</li>\n<li>This is the main reason why I made this blog post as this was by far the most challenging thing to learn about creating a feature filter that is to be used per-request.<br />\nYou're probably wondering why I couldn't just inject the <code class=\"language-text\">HttpContext</code> and be done with things. But remember earlier I mentioned that the feature filter is registered as a <strong>singleton</strong>?  That means that there's only one instance for the entire application and for every web request.  Each call made to it is technically done against the same instance. This makes it doubly important to ensure that each time the feature filter is called, it obtains the request for the current thread and answers based on the <code class=\"language-text\">AppContext</code> registered in the same scope as that <code class=\"language-text\">HttpContext</code>.</li>\n<li>It probably goes without saying, but in this case, my user object has a property called <code class=\"language-text\">Features</code> which traverses the object graph to build the full list of features available to the user. If you are adapting this example for your own use, this line is where you can figure out what you want to return, a <code class=\"language-text\">true</code> or a <code class=\"language-text\">false</code>!</li>\n</ol>\n<hr>\n<p>If you're looking into whether you can make use of the feature management system, or if you've been trying to make sense of it, I hope you've found this quick little summary useful.  I think overall, it covers the main details and gotchas that I was missing as I was getting started with .NET feature management.</p>\n<p>I think a good supplement to this post would be a quick explainer on the ASP.NET request lifecycle as well as scoped services during dependency injection.  There are many resources out there that cover these concepts, although maybe one day I'll put together my own.</p>","internal":{"type":"MarkdownRemark"}},"internal":{"mediaType":"text/html","type":"post","owner":"default-site-plugin","ignoreType":null,"fieldOwners":null,"description":null,"contentDigest":"cab4d3266877d1538af8327107879ac3","content":null},"slug":"integrating-with-net-feature-management","title":"Integrating With .NET Feature Management","created":"2021-02-15T04:00:00.000Z","updated":null}}]}},"pageContext":{"slug":"integrating-with-net-feature-management"}},"staticQueryHashes":["3220165301"]}